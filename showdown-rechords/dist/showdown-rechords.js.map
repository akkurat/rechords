{"version":3,"sources":["../src/showdown-rechords.js"],"names":[],"mappings":"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","file":"showdown-rechords.js","sourcesContent":["/* vim: set tabstop=2:softtabstop=2 */\n\nmodule.exports = function showdownRechords() {\n\n  require('source-map-support').install();\n\n  var Hypher = require('hypher'),\n    english = require('hyphenation.en-us'),\n    h = new Hypher(english);\n\n  function parseLine(match, content) {\n    // TODO: akkordzeile erkennen und anders behandeln\n    var line = content.replace(/\\S+ ?/gi, parseWord);\n    return line + '<br />';\n  }\n\n  function mergeCoupled(arr) {\n    var pending = '',\n      out = [];\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i].endsWith('_')) {\n        pending = arr[i].replace('_', ' ');\n        continue;\n      }\n      out.push(pending + arr[i]);\n    }\n    return out;\n  }\n\n  function parseWord(match) {\n    var chords = [],\n      text = match.replace(/\\[(.+?)\\]/gi, function (match, chord) {\n        chords.push('<span class=\"chord\">' + chord + '</span>');\n        return '';\n      }),\n      chunks = h.hyphenate(text),\n      out = mergeCoupled(chunks).map(function (s) {\n        return '<span class=\"s\">' + s + '</span>';\n      }).join('');\n\n    return chords.join('') + out;\n  }\n\n  return [\n    // Title\n    {\n      type: 'lang',\n      regex: /([^\\n]+)\\n([^\\n]+)\\n=+\\n/,\n      replace: function (match, song, artist) {\n        return '<h1>' + song + '</h1>\\n<h2>' + artist + '</h2>\\n\\n';\n      }\n    },\n\n    // Tags\n    {\n      type: 'lang',\n      regex: /(#(\\S+) *)+/,\n      replace: function (tags) {\n        return '<ul class=\"tags\">' + tags.replace(/#(\\S+) */g, function (match, tag) {\n          return '\\n    <li>' + tag + '</li>';\n        }) + '\\n</ul>';\n      }\n    },\n\n    // Verses\n    {\n      type: 'lang',\n      regex: /([^\\n]+): *\\n((.+[^:] *\\n)+)(\\n+(?=([^\\n]+: *\\n|\\n|$))|$)/gi,\n\n      replace: function (match, id, content) {\n        var h3 = '';\n        if (id) {\n          h3 = '<h3>' + id + '</h3>\\n';\n        }\n\n        // Process line\n        var verse = h3 + '<p>' + content.replace(/(.*?)\\n/g, parseLine) + '</p>';\n\n        // Fix last lines\n        verse = verse.replace(/(<br \\/>)+\\s*<\\/p>/g, '\\n</p>'); // Trim all linebreaks at verse-ends\n        verse = verse.replace(/<br \\/><br \\/>/g, '\\n</p><p>'); // 2x line break -> paragraph break\n        return verse;\n      }\n    }\n  ];\n};\n"]}